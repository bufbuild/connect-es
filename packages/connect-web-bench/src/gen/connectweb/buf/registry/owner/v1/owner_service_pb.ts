// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "ts_nocheck=false,target=ts"
// @generated from file buf/registry/owner/v1/owner_service.proto (package buf.registry.owner.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Owner, OwnerRef } from "./owner_pb.js";

/**
 * @generated from message buf.registry.owner.v1.GetOwnersRequest
 */
export class GetOwnersRequest extends Message<GetOwnersRequest> {
  /**
   * The Users or Organizations to request.
   *
   * @generated from field: repeated buf.registry.owner.v1.OwnerRef owner_refs = 1;
   */
  ownerRefs: OwnerRef[] = [];

  constructor(data?: PartialMessage<GetOwnersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.owner.v1.GetOwnersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner_refs", kind: "message", T: OwnerRef, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOwnersRequest {
    return new GetOwnersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOwnersRequest {
    return new GetOwnersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOwnersRequest {
    return new GetOwnersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOwnersRequest | PlainMessage<GetOwnersRequest> | undefined, b: GetOwnersRequest | PlainMessage<GetOwnersRequest> | undefined): boolean {
    return proto3.util.equals(GetOwnersRequest, a, b);
  }
}

/**
 * @generated from message buf.registry.owner.v1.GetOwnersResponse
 */
export class GetOwnersResponse extends Message<GetOwnersResponse> {
  /**
   * The retrieved Users or Organizations in the same order as requested.
   *
   * @generated from field: repeated buf.registry.owner.v1.Owner owners = 1;
   */
  owners: Owner[] = [];

  constructor(data?: PartialMessage<GetOwnersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.owner.v1.GetOwnersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owners", kind: "message", T: Owner, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOwnersResponse {
    return new GetOwnersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOwnersResponse {
    return new GetOwnersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOwnersResponse {
    return new GetOwnersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOwnersResponse | PlainMessage<GetOwnersResponse> | undefined, b: GetOwnersResponse | PlainMessage<GetOwnersResponse> | undefined): boolean {
    return proto3.util.equals(GetOwnersResponse, a, b);
  }
}

