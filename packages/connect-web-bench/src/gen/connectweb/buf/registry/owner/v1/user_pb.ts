// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "ts_nocheck=false,target=ts"
// @generated from file buf/registry/owner/v1/user.proto (package buf.registry.owner.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * The state of the a User, either active or inactive.
 *
 * @generated from enum buf.registry.owner.v1.UserState
 */
export enum UserState {
  /**
   * @generated from enum value: USER_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: USER_STATE_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * @generated from enum value: USER_STATE_INACTIVE = 2;
   */
  INACTIVE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(UserState)
proto3.util.setEnumType(UserState, "buf.registry.owner.v1.UserState", [
  { no: 0, name: "USER_STATE_UNSPECIFIED" },
  { no: 1, name: "USER_STATE_ACTIVE" },
  { no: 2, name: "USER_STATE_INACTIVE" },
]);

/**
 * The type of a User.
 *
 * @generated from enum buf.registry.owner.v1.UserType
 */
export enum UserType {
  /**
   * @generated from enum value: USER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Users that are standard users.
   *
   * @generated from enum value: USER_TYPE_STANDARD = 1;
   */
  STANDARD = 1,

  /**
   * Users that are bots.
   *
   * @generated from enum value: USER_TYPE_BOT = 2;
   */
  BOT = 2,

  /**
   * Users that are internal system users.
   *
   * @generated from enum value: USER_TYPE_SYSTEM = 3;
   */
  SYSTEM = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(UserType)
proto3.util.setEnumType(UserType, "buf.registry.owner.v1.UserType", [
  { no: 0, name: "USER_TYPE_UNSPECIFIED" },
  { no: 1, name: "USER_TYPE_STANDARD" },
  { no: 2, name: "USER_TYPE_BOT" },
  { no: 3, name: "USER_TYPE_SYSTEM" },
]);

/**
 * The verification status of an User.
 *
 * @generated from enum buf.registry.owner.v1.UserVerificationStatus
 */
export enum UserVerificationStatus {
  /**
   * @generated from enum value: USER_VERIFICATION_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The User is unverified.
   *
   * @generated from enum value: USER_VERIFICATION_STATUS_UNVERIFIED = 1;
   */
  UNVERIFIED = 1,

  /**
   * The User is verified.
   *
   * @generated from enum value: USER_VERIFICATION_STATUS_VERIFIED = 2;
   */
  VERIFIED = 2,

  /**
   * The User is an official user of the BSR owner.
   *
   * @generated from enum value: USER_VERIFICATION_STATUS_OFFICIAL = 3;
   */
  OFFICIAL = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(UserVerificationStatus)
proto3.util.setEnumType(UserVerificationStatus, "buf.registry.owner.v1.UserVerificationStatus", [
  { no: 0, name: "USER_VERIFICATION_STATUS_UNSPECIFIED" },
  { no: 1, name: "USER_VERIFICATION_STATUS_UNVERIFIED" },
  { no: 2, name: "USER_VERIFICATION_STATUS_VERIFIED" },
  { no: 3, name: "USER_VERIFICATION_STATUS_OFFICIAL" },
]);

/**
 * A user on the BSR.
 *
 * A name uniquely identifies a User, however name is mutable.
 *
 * @generated from message buf.registry.owner.v1.User
 */
export class User extends Message<User> {
  /**
   * The id for the User.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The time the User was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * The last time the User was updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * The name of the User.
   *
   * A name uniquely identifies a User, however name is mutable.
   *
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * The type of the User.
   *
   * @generated from field: buf.registry.owner.v1.UserType type = 5;
   */
  type = UserType.UNSPECIFIED;

  /**
   * The state of the User.
   *
   * @generated from field: buf.registry.owner.v1.UserState state = 6;
   */
  state = UserState.UNSPECIFIED;

  /**
   * The configurable description of the User.
   *
   * @generated from field: string description = 7;
   */
  description = "";

  /**
   * The configurable URL that represents the homepage for a User.
   *
   * @generated from field: string url = 8;
   */
  url = "";

  /**
   * The verification status of the User.
   *
   * @generated from field: buf.registry.owner.v1.UserVerificationStatus verification_status = 9;
   */
  verificationStatus = UserVerificationStatus.UNSPECIFIED;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.owner.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "create_time", kind: "message", T: Timestamp },
    { no: 3, name: "update_time", kind: "message", T: Timestamp },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "type", kind: "enum", T: proto3.getEnumType(UserType) },
    { no: 6, name: "state", kind: "enum", T: proto3.getEnumType(UserState) },
    { no: 7, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "verification_status", kind: "enum", T: proto3.getEnumType(UserVerificationStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * UserRef is a reference to a User, either an id or a name.
 *
 * This is used in requests.
 *
 * @generated from message buf.registry.owner.v1.UserRef
 */
export class UserRef extends Message<UserRef> {
  /**
   * @generated from oneof buf.registry.owner.v1.UserRef.value
   */
  value: {
    /**
     * The id of the User.
     *
     * @generated from field: string id = 1;
     */
    value: string;
    case: "id";
  } | {
    /**
     * The name of the User.
     *
     * @generated from field: string name = 2;
     */
    value: string;
    case: "name";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<UserRef>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.owner.v1.UserRef";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserRef {
    return new UserRef().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserRef {
    return new UserRef().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserRef {
    return new UserRef().fromJsonString(jsonString, options);
  }

  static equals(a: UserRef | PlainMessage<UserRef> | undefined, b: UserRef | PlainMessage<UserRef> | undefined): boolean {
    return proto3.util.equals(UserRef, a, b);
  }
}

