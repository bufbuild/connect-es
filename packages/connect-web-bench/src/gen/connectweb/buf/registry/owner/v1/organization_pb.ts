// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "ts_nocheck=false,target=ts"
// @generated from file buf/registry/owner/v1/organization.proto (package buf.registry.owner.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * The verification status of an Organization.
 *
 * @generated from enum buf.registry.owner.v1.OrganizationVerificationStatus
 */
export enum OrganizationVerificationStatus {
  /**
   * @generated from enum value: ORGANIZATION_VERIFICATION_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The Organization is unverified.
   *
   * @generated from enum value: ORGANIZATION_VERIFICATION_STATUS_UNVERIFIED = 1;
   */
  UNVERIFIED = 1,

  /**
   * The Organization is verified.
   *
   * @generated from enum value: ORGANIZATION_VERIFICATION_STATUS_VERIFIED = 2;
   */
  VERIFIED = 2,

  /**
   * The Organization is an official organization of the BSR owner.
   *
   * @generated from enum value: ORGANIZATION_VERIFICATION_STATUS_OFFICIAL = 3;
   */
  OFFICIAL = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(OrganizationVerificationStatus)
proto3.util.setEnumType(OrganizationVerificationStatus, "buf.registry.owner.v1.OrganizationVerificationStatus", [
  { no: 0, name: "ORGANIZATION_VERIFICATION_STATUS_UNSPECIFIED" },
  { no: 1, name: "ORGANIZATION_VERIFICATION_STATUS_UNVERIFIED" },
  { no: 2, name: "ORGANIZATION_VERIFICATION_STATUS_VERIFIED" },
  { no: 3, name: "ORGANIZATION_VERIFICATION_STATUS_OFFICIAL" },
]);

/**
 * Organization is an organization on the BSR.
 *
 * A name uniquely identifies an Organization, however name is mutable.
 *
 * @generated from message buf.registry.owner.v1.Organization
 */
export class Organization extends Message<Organization> {
  /**
   * The id for the Organization.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The time the Organization was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * The last time the Organization was updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * The name of the Organization.
   *
   * A name uniquely identifies an Organization, however name is mutable.
   *
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * The configurable description of the Organization.
   *
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * The configurable URL that represents the homepage for an Organization.
   *
   * @generated from field: string url = 6;
   */
  url = "";

  /**
   * The verification status of the Organization.
   *
   * @generated from field: buf.registry.owner.v1.OrganizationVerificationStatus verification_status = 7;
   */
  verificationStatus = OrganizationVerificationStatus.UNSPECIFIED;

  constructor(data?: PartialMessage<Organization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.owner.v1.Organization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "create_time", kind: "message", T: Timestamp },
    { no: 3, name: "update_time", kind: "message", T: Timestamp },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "verification_status", kind: "enum", T: proto3.getEnumType(OrganizationVerificationStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Organization {
    return new Organization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Organization {
    return new Organization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Organization {
    return new Organization().fromJsonString(jsonString, options);
  }

  static equals(a: Organization | PlainMessage<Organization> | undefined, b: Organization | PlainMessage<Organization> | undefined): boolean {
    return proto3.util.equals(Organization, a, b);
  }
}

/**
 * OrganizationRef is a reference to an Organization, either an id or a name.
 *
 * This is used in requests.
 *
 * @generated from message buf.registry.owner.v1.OrganizationRef
 */
export class OrganizationRef extends Message<OrganizationRef> {
  /**
   * @generated from oneof buf.registry.owner.v1.OrganizationRef.value
   */
  value: {
    /**
     * The id of the Organization.
     *
     * @generated from field: string id = 1;
     */
    value: string;
    case: "id";
  } | {
    /**
     * The name of the Organization.
     *
     * @generated from field: string name = 2;
     */
    value: string;
    case: "name";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<OrganizationRef>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.owner.v1.OrganizationRef";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrganizationRef {
    return new OrganizationRef().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrganizationRef {
    return new OrganizationRef().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrganizationRef {
    return new OrganizationRef().fromJsonString(jsonString, options);
  }

  static equals(a: OrganizationRef | PlainMessage<OrganizationRef> | undefined, b: OrganizationRef | PlainMessage<OrganizationRef> | undefined): boolean {
    return proto3.util.equals(OrganizationRef, a, b);
  }
}

