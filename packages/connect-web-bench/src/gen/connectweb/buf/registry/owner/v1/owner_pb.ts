// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "ts_nocheck=false,target=ts"
// @generated from file buf/registry/owner/v1/owner.proto (package buf.registry.owner.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { User } from "./user_pb.js";
import { Organization } from "./organization_pb.js";

/**
 * A User or Organization.
 *
 * @generated from message buf.registry.owner.v1.Owner
 */
export class Owner extends Message<Owner> {
  /**
   * @generated from oneof buf.registry.owner.v1.Owner.value
   */
  value: {
    /**
     * The User.
     *
     * @generated from field: buf.registry.owner.v1.User user = 1;
     */
    value: User;
    case: "user";
  } | {
    /**
     * The Organization.
     *
     * @generated from field: buf.registry.owner.v1.Organization organization = 2;
     */
    value: Organization;
    case: "organization";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Owner>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.owner.v1.Owner";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User, oneof: "value" },
    { no: 2, name: "organization", kind: "message", T: Organization, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Owner {
    return new Owner().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Owner {
    return new Owner().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Owner {
    return new Owner().fromJsonString(jsonString, options);
  }

  static equals(a: Owner | PlainMessage<Owner> | undefined, b: Owner | PlainMessage<Owner> | undefined): boolean {
    return proto3.util.equals(Owner, a, b);
  }
}

/**
 * OwnerRef is a reference to a User or Organization, either an id or a name.
 *
 * This is used in requests.
 *
 * @generated from message buf.registry.owner.v1.OwnerRef
 */
export class OwnerRef extends Message<OwnerRef> {
  /**
   * @generated from oneof buf.registry.owner.v1.OwnerRef.value
   */
  value: {
    /**
     * The id of the User or Organization.
     *
     * @generated from field: string id = 1;
     */
    value: string;
    case: "id";
  } | {
    /**
     * The name of the User or Organization.
     *
     * @generated from field: string name = 2;
     */
    value: string;
    case: "name";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<OwnerRef>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.owner.v1.OwnerRef";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OwnerRef {
    return new OwnerRef().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OwnerRef {
    return new OwnerRef().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OwnerRef {
    return new OwnerRef().fromJsonString(jsonString, options);
  }

  static equals(a: OwnerRef | PlainMessage<OwnerRef> | undefined, b: OwnerRef | PlainMessage<OwnerRef> | undefined): boolean {
    return proto3.util.equals(OwnerRef, a, b);
  }
}

