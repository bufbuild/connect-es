// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "ts_nocheck=false,target=ts"
// @generated from file buf/registry/owner/v1/user_service.proto (package buf.registry.owner.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { User, UserRef, UserState, UserType, UserVerificationStatus } from "./user_pb.js";
import { OrganizationRef } from "./organization_pb.js";

/**
 * @generated from message buf.registry.owner.v1.GetUsersRequest
 */
export class GetUsersRequest extends Message<GetUsersRequest> {
  /**
   * The Users to request.
   *
   * @generated from field: repeated buf.registry.owner.v1.UserRef user_refs = 1;
   */
  userRefs: UserRef[] = [];

  constructor(data?: PartialMessage<GetUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.owner.v1.GetUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_refs", kind: "message", T: UserRef, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsersRequest {
    return new GetUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsersRequest {
    return new GetUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsersRequest {
    return new GetUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsersRequest | PlainMessage<GetUsersRequest> | undefined, b: GetUsersRequest | PlainMessage<GetUsersRequest> | undefined): boolean {
    return proto3.util.equals(GetUsersRequest, a, b);
  }
}

/**
 * @generated from message buf.registry.owner.v1.GetUsersResponse
 */
export class GetUsersResponse extends Message<GetUsersResponse> {
  /**
   * The retrieved Users in the same order as requested.
   *
   * @generated from field: repeated buf.registry.owner.v1.User users = 1;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<GetUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.owner.v1.GetUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsersResponse {
    return new GetUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsersResponse {
    return new GetUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsersResponse {
    return new GetUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsersResponse | PlainMessage<GetUsersResponse> | undefined, b: GetUsersResponse | PlainMessage<GetUsersResponse> | undefined): boolean {
    return proto3.util.equals(GetUsersResponse, a, b);
  }
}

/**
 * @generated from message buf.registry.owner.v1.ListUsersRequest
 */
export class ListUsersRequest extends Message<ListUsersRequest> {
  /**
   * The maximum number of items to return.
   *
   * The default value is 10.
   *
   * @generated from field: uint32 page_size = 1;
   */
  pageSize = 0;

  /**
   * The page to start from.
   *
   * If empty, the first page is returned,
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * The specific Organizations to list Users for.
   *
   * If this is empty, all Users for all Organizations are listed, but this functionality
   * is limited to Users with the necessary permissions.
   *
   * @generated from field: repeated buf.registry.owner.v1.OrganizationRef organization_refs = 3;
   */
  organizationRefs: OrganizationRef[] = [];

  /**
   * The order to return the Users.
   *
   * If not specified, defaults to ORDER_CREATE_TIME_DESC.
   *
   * @generated from field: buf.registry.owner.v1.ListUsersRequest.Order order = 4;
   */
  order = ListUsersRequest_Order.UNSPECIFIED;

  /**
   * Only return Users of these types.
   *
   * @generated from field: repeated buf.registry.owner.v1.UserType has_types = 5;
   */
  hasTypes: UserType[] = [];

  /**
   * Only return Users of these states.
   *
   * @generated from field: repeated buf.registry.owner.v1.UserState has_states = 6;
   */
  hasStates: UserState[] = [];

  constructor(data?: PartialMessage<ListUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.owner.v1.ListUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "organization_refs", kind: "message", T: OrganizationRef, repeated: true },
    { no: 4, name: "order", kind: "enum", T: proto3.getEnumType(ListUsersRequest_Order) },
    { no: 5, name: "has_types", kind: "enum", T: proto3.getEnumType(UserType), repeated: true },
    { no: 6, name: "has_states", kind: "enum", T: proto3.getEnumType(UserState), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsersRequest {
    return new ListUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsersRequest {
    return new ListUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsersRequest {
    return new ListUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListUsersRequest | PlainMessage<ListUsersRequest> | undefined, b: ListUsersRequest | PlainMessage<ListUsersRequest> | undefined): boolean {
    return proto3.util.equals(ListUsersRequest, a, b);
  }
}

/**
 * The list order.
 *
 * @generated from enum buf.registry.owner.v1.ListUsersRequest.Order
 */
export enum ListUsersRequest_Order {
  /**
   * @generated from enum value: ORDER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Order by create_time newest to oldest.
   *
   * @generated from enum value: ORDER_CREATE_TIME_DESC = 1;
   */
  CREATE_TIME_DESC = 1,

  /**
   * Order by create_time oldest to newest.
   *
   * @generated from enum value: ORDER_CREATE_TIME_ASC = 2;
   */
  CREATE_TIME_ASC = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ListUsersRequest_Order)
proto3.util.setEnumType(ListUsersRequest_Order, "buf.registry.owner.v1.ListUsersRequest.Order", [
  { no: 0, name: "ORDER_UNSPECIFIED" },
  { no: 1, name: "ORDER_CREATE_TIME_DESC" },
  { no: 2, name: "ORDER_CREATE_TIME_ASC" },
]);

/**
 * @generated from message buf.registry.owner.v1.ListUsersResponse
 */
export class ListUsersResponse extends Message<ListUsersResponse> {
  /**
   * The next page token.
   *
   * If empty, there are no more pages.
   *
   * @generated from field: string next_page_token = 1;
   */
  nextPageToken = "";

  /**
   * The list of Users.
   *
   * @generated from field: repeated buf.registry.owner.v1.User users = 2;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<ListUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.owner.v1.ListUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsersResponse {
    return new ListUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsersResponse {
    return new ListUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsersResponse {
    return new ListUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListUsersResponse | PlainMessage<ListUsersResponse> | undefined, b: ListUsersResponse | PlainMessage<ListUsersResponse> | undefined): boolean {
    return proto3.util.equals(ListUsersResponse, a, b);
  }
}

/**
 * @generated from message buf.registry.owner.v1.CreateUsersRequest
 */
export class CreateUsersRequest extends Message<CreateUsersRequest> {
  /**
   * The Users to create.
   *
   * @generated from field: repeated buf.registry.owner.v1.CreateUsersRequest.Value values = 1;
   */
  values: CreateUsersRequest_Value[] = [];

  constructor(data?: PartialMessage<CreateUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.owner.v1.CreateUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "message", T: CreateUsersRequest_Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUsersRequest {
    return new CreateUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUsersRequest {
    return new CreateUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUsersRequest {
    return new CreateUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUsersRequest | PlainMessage<CreateUsersRequest> | undefined, b: CreateUsersRequest | PlainMessage<CreateUsersRequest> | undefined): boolean {
    return proto3.util.equals(CreateUsersRequest, a, b);
  }
}

/**
 * An individual request to create a User.
 *
 * @generated from message buf.registry.owner.v1.CreateUsersRequest.Value
 */
export class CreateUsersRequest_Value extends Message<CreateUsersRequest_Value> {
  /**
   * The name of the User.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The type of the User.
   *
   * If not set, the default USER_TYPE_STANDARD is used.
   *
   * @generated from field: buf.registry.owner.v1.UserType type = 2;
   */
  type = UserType.UNSPECIFIED;

  /**
   * The configurable description of the User.
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * The configurable URL that represents the homepage for a User.
   *
   * @generated from field: string url = 4;
   */
  url = "";

  /**
   * The verification status of the User.
   *
   * If not set, the User will default to VERIFICATION_STATUS_UNVERIFIED.
   *
   * @generated from field: buf.registry.owner.v1.UserVerificationStatus verification_status = 5;
   */
  verificationStatus = UserVerificationStatus.UNSPECIFIED;

  constructor(data?: PartialMessage<CreateUsersRequest_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.owner.v1.CreateUsersRequest.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(UserType) },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "verification_status", kind: "enum", T: proto3.getEnumType(UserVerificationStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUsersRequest_Value {
    return new CreateUsersRequest_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUsersRequest_Value {
    return new CreateUsersRequest_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUsersRequest_Value {
    return new CreateUsersRequest_Value().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUsersRequest_Value | PlainMessage<CreateUsersRequest_Value> | undefined, b: CreateUsersRequest_Value | PlainMessage<CreateUsersRequest_Value> | undefined): boolean {
    return proto3.util.equals(CreateUsersRequest_Value, a, b);
  }
}

/**
 * @generated from message buf.registry.owner.v1.CreateUsersResponse
 */
export class CreateUsersResponse extends Message<CreateUsersResponse> {
  /**
   * The created Users in the same order as given on the request.
   *
   * @generated from field: repeated buf.registry.owner.v1.User users = 1;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<CreateUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.owner.v1.CreateUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUsersResponse {
    return new CreateUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUsersResponse {
    return new CreateUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUsersResponse {
    return new CreateUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUsersResponse | PlainMessage<CreateUsersResponse> | undefined, b: CreateUsersResponse | PlainMessage<CreateUsersResponse> | undefined): boolean {
    return proto3.util.equals(CreateUsersResponse, a, b);
  }
}

/**
 * @generated from message buf.registry.owner.v1.UpdateUsersRequest
 */
export class UpdateUsersRequest extends Message<UpdateUsersRequest> {
  /**
   * The Users to update.
   *
   * @generated from field: repeated buf.registry.owner.v1.UpdateUsersRequest.Value values = 1;
   */
  values: UpdateUsersRequest_Value[] = [];

  constructor(data?: PartialMessage<UpdateUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.owner.v1.UpdateUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "message", T: UpdateUsersRequest_Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUsersRequest {
    return new UpdateUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUsersRequest {
    return new UpdateUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUsersRequest {
    return new UpdateUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUsersRequest | PlainMessage<UpdateUsersRequest> | undefined, b: UpdateUsersRequest | PlainMessage<UpdateUsersRequest> | undefined): boolean {
    return proto3.util.equals(UpdateUsersRequest, a, b);
  }
}

/**
 * An individual request to update a User.
 *
 * @generated from message buf.registry.owner.v1.UpdateUsersRequest.Value
 */
export class UpdateUsersRequest_Value extends Message<UpdateUsersRequest_Value> {
  /**
   * The User to update.
   *
   * @generated from field: buf.registry.owner.v1.UserRef user_ref = 1;
   */
  userRef?: UserRef;

  /**
   * The state of the User.
   *
   * @generated from field: optional buf.registry.owner.v1.UserState state = 2;
   */
  state?: UserState;

  /**
   * The configurable description of the User.
   *
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * The configurable URL that represents the homepage for a User.
   *
   * @generated from field: optional string url = 4;
   */
  url?: string;

  /**
   * The verification status of the User.
   *
   * @generated from field: optional buf.registry.owner.v1.UserVerificationStatus verification_status = 5;
   */
  verificationStatus?: UserVerificationStatus;

  constructor(data?: PartialMessage<UpdateUsersRequest_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.owner.v1.UpdateUsersRequest.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_ref", kind: "message", T: UserRef },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(UserState), opt: true },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "verification_status", kind: "enum", T: proto3.getEnumType(UserVerificationStatus), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUsersRequest_Value {
    return new UpdateUsersRequest_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUsersRequest_Value {
    return new UpdateUsersRequest_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUsersRequest_Value {
    return new UpdateUsersRequest_Value().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUsersRequest_Value | PlainMessage<UpdateUsersRequest_Value> | undefined, b: UpdateUsersRequest_Value | PlainMessage<UpdateUsersRequest_Value> | undefined): boolean {
    return proto3.util.equals(UpdateUsersRequest_Value, a, b);
  }
}

/**
 * @generated from message buf.registry.owner.v1.UpdateUsersResponse
 */
export class UpdateUsersResponse extends Message<UpdateUsersResponse> {
  /**
   * The updated Users in the same order as given on the request.
   *
   * @generated from field: repeated buf.registry.owner.v1.User users = 1;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<UpdateUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.owner.v1.UpdateUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUsersResponse {
    return new UpdateUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUsersResponse {
    return new UpdateUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUsersResponse {
    return new UpdateUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUsersResponse | PlainMessage<UpdateUsersResponse> | undefined, b: UpdateUsersResponse | PlainMessage<UpdateUsersResponse> | undefined): boolean {
    return proto3.util.equals(UpdateUsersResponse, a, b);
  }
}

/**
 * @generated from message buf.registry.owner.v1.DeleteUsersRequest
 */
export class DeleteUsersRequest extends Message<DeleteUsersRequest> {
  /**
   * The Users to delete.
   *
   * @generated from field: repeated buf.registry.owner.v1.UserRef user_refs = 1;
   */
  userRefs: UserRef[] = [];

  constructor(data?: PartialMessage<DeleteUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.owner.v1.DeleteUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_refs", kind: "message", T: UserRef, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUsersRequest {
    return new DeleteUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUsersRequest {
    return new DeleteUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUsersRequest {
    return new DeleteUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUsersRequest | PlainMessage<DeleteUsersRequest> | undefined, b: DeleteUsersRequest | PlainMessage<DeleteUsersRequest> | undefined): boolean {
    return proto3.util.equals(DeleteUsersRequest, a, b);
  }
}

/**
 * @generated from message buf.registry.owner.v1.DeleteUsersResponse
 */
export class DeleteUsersResponse extends Message<DeleteUsersResponse> {
  constructor(data?: PartialMessage<DeleteUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.owner.v1.DeleteUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUsersResponse {
    return new DeleteUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUsersResponse {
    return new DeleteUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUsersResponse {
    return new DeleteUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUsersResponse | PlainMessage<DeleteUsersResponse> | undefined, b: DeleteUsersResponse | PlainMessage<DeleteUsersResponse> | undefined): boolean {
    return proto3.util.equals(DeleteUsersResponse, a, b);
  }
}

