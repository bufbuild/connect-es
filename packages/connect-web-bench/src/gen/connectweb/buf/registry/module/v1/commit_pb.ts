// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "ts_nocheck=false,target=ts"
// @generated from file buf/registry/module/v1/commit.proto (package buf.registry.module.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Digest } from "./digest_pb.js";

/**
 * A commit on a specific Module.
 *
 * Commits are immutable.
 *
 * Many Commits may be associated with one Digest.
 *
 * Note that the Digest returned on a Commit depends on the requested DigestType in the
 * RPC that returned the Commit.
 *
 * @generated from message buf.registry.module.v1.Commit
 */
export class Commit extends Message<Commit> {
  /**
   * The id of the Commit.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The time the Commit was pushed to the BSR.
   *
   * Commits are immutable, so there is no corresponding update_time.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * The id of the User or Organization that owns the Module that the Commit is associated with.
   *
   * @generated from field: string owner_id = 3;
   */
  ownerId = "";

  /**
   * The id of the Module that the Commit is associated with.
   *
   * @generated from field: string module_id = 4;
   */
  moduleId = "";

  /**
   * The Digest of the Commit's contents.
   *
   * Note that individual RPCs may request a specific DigestType, and a Digest of
   * this DigestType will be returned as part of this Commit. This may affect your
   * caching of returned Commit messages if you require different DigestTypes.
   *
   * @generated from field: buf.registry.module.v1.Digest digest = 5;
   */
  digest?: Digest;

  /**
   * The id of the User that created this Commit on the BSR.
   *
   * May be empty if the User is no longer available.
   *
   * @generated from field: string created_by_user_id = 6;
   */
  createdByUserId = "";

  /**
   * The URL of the source control commit that is associated with the Commit.
   *
   * BSR users can navigate to this link to find source control information that is relevant to this Commit
   * (e.g. commit description, PR discussion, authors, approvers, etc.).
   *
   * @generated from field: string source_control_url = 7;
   */
  sourceControlUrl = "";

  constructor(data?: PartialMessage<Commit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1.Commit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "create_time", kind: "message", T: Timestamp },
    { no: 3, name: "owner_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "module_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "digest", kind: "message", T: Digest },
    { no: 6, name: "created_by_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "source_control_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Commit {
    return new Commit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Commit {
    return new Commit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Commit {
    return new Commit().fromJsonString(jsonString, options);
  }

  static equals(a: Commit | PlainMessage<Commit> | undefined, b: Commit | PlainMessage<Commit> | undefined): boolean {
    return proto3.util.equals(Commit, a, b);
  }
}

