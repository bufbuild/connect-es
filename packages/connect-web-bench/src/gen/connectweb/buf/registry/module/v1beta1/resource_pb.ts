// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "ts_nocheck=false,target=ts"
// @generated from file buf/registry/module/v1beta1/resource.proto (package buf.registry.module.v1beta1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Module } from "./module_pb.js";
import { Label } from "./label_pb.js";
import { Commit } from "./commit_pb.js";

/**
 * A Module, Label, or Commit.
 *
 * @generated from message buf.registry.module.v1beta1.Resource
 */
export class Resource extends Message<Resource> {
  /**
   * @generated from oneof buf.registry.module.v1beta1.Resource.value
   */
  value: {
    /**
     * @generated from field: buf.registry.module.v1beta1.Module module = 1;
     */
    value: Module;
    case: "module";
  } | {
    /**
     * @generated from field: buf.registry.module.v1beta1.Label label = 2;
     */
    value: Label;
    case: "label";
  } | {
    /**
     * @generated from field: buf.registry.module.v1beta1.Commit commit = 3;
     */
    value: Commit;
    case: "commit";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Resource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1beta1.Resource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "message", T: Module, oneof: "value" },
    { no: 2, name: "label", kind: "message", T: Label, oneof: "value" },
    { no: 3, name: "commit", kind: "message", T: Commit, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Resource {
    return new Resource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJsonString(jsonString, options);
  }

  static equals(a: Resource | PlainMessage<Resource> | undefined, b: Resource | PlainMessage<Resource> | undefined): boolean {
    return proto3.util.equals(Resource, a, b);
  }
}

/**
 * A reference to any of:
 *   - Module
 *   - Label
 *   - Commit
 *
 * The id or name is resolved to a specific resource.
 * If an id is passed, this is interpreted as being the id of the resource.
 * If a name is passed, the semantics according to ResourceRef.Name are applied.
 *
 * ResourceRefs can only be used in requests, and only for read-only RPCs, that is
 * you should not use an arbitrary reference when modifying a specific resource.
 *
 * @generated from message buf.registry.module.v1beta1.ResourceRef
 */
export class ResourceRef extends Message<ResourceRef> {
  /**
   * @generated from oneof buf.registry.module.v1beta1.ResourceRef.value
   */
  value: {
    /**
     * The id of the resource.
     *
     * @generated from field: string id = 1;
     */
    value: string;
    case: "id";
  } | {
    /**
     * The fully-qualified name of the resource.
     *
     * @generated from field: buf.registry.module.v1beta1.ResourceRef.Name name = 2;
     */
    value: ResourceRef_Name;
    case: "name";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ResourceRef>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1beta1.ResourceRef";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 2, name: "name", kind: "message", T: ResourceRef_Name, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceRef {
    return new ResourceRef().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceRef {
    return new ResourceRef().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceRef {
    return new ResourceRef().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceRef | PlainMessage<ResourceRef> | undefined, b: ResourceRef | PlainMessage<ResourceRef> | undefined): boolean {
    return proto3.util.equals(ResourceRef, a, b);
  }
}

/**
 * The fully-qualified name component of a ResourceRef.
 *
 * The following semantics are applied:
 *   - If the child oneof is not specified, the name is interpreted to reference a Module.
 *   - If label_name is specified, the name is interpreted to reference a Label.
 *   - If ref is specified, it is interpreted to be either an id or name.
 *     - If an id, this is equivalent to setting the id field on ResourceRef. However,
 *       backends can choose to validate that the owner and module fields match the resource
 *       referenced, as additional validation.
 *     - If a name, this is interpreted to be a Label name.
 *     - If there is a conflict between names across resources (for example, there is a Commit id
 *       and Label name of the same value), the following order of precedence is applied:
 *       - Commit
 *       - Label
 *
 * Names can only be used in requests, and only for read-only RPCs, that is
 * you should not use an arbitrary reference when modifying a specific resource.
 *
 * @generated from message buf.registry.module.v1beta1.ResourceRef.Name
 */
export class ResourceRef_Name extends Message<ResourceRef_Name> {
  /**
   * The name of the User or Organization that owns the resource.
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * The name of the Module that contains or is the resource.
   *
   * @generated from field: string module = 2;
   */
  module = "";

  /**
   * If the oneof is present but empty, this should be treated as not present.
   *
   * @generated from oneof buf.registry.module.v1beta1.ResourceRef.Name.child
   */
  child: {
    /**
     * The name of the Label.
     *
     * If this value is present but empty, this should be treated as not present, that is
     * an empty value is the same as a null value.
     *
     * @generated from field: string label_name = 3;
     */
    value: string;
    case: "labelName";
  } | {
    /**
     * The untyped reference, applying the semantics as documented on the Name message.
     *
     * If this value is present but empty, this should be treated as not present, that is
     * an empty value is the same as a null value.
     *
     * @generated from field: string ref = 4;
     */
    value: string;
    case: "ref";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ResourceRef_Name>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1beta1.ResourceRef.Name";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "label_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "child" },
    { no: 4, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "child" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceRef_Name {
    return new ResourceRef_Name().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceRef_Name {
    return new ResourceRef_Name().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceRef_Name {
    return new ResourceRef_Name().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceRef_Name | PlainMessage<ResourceRef_Name> | undefined, b: ResourceRef_Name | PlainMessage<ResourceRef_Name> | undefined): boolean {
    return proto3.util.equals(ResourceRef_Name, a, b);
  }
}

