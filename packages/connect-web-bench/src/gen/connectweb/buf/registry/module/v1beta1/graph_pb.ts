// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "ts_nocheck=false,target=ts"
// @generated from file buf/registry/module/v1beta1/graph.proto (package buf.registry.module.v1beta1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Commit } from "./commit_pb.js";

/**
 * A dependency graph.
 *
 * @generated from message buf.registry.module.v1beta1.Graph
 */
export class Graph extends Message<Graph> {
  /**
   * The nodes of the graph, each of which are Commits.
   *
   * @generated from field: repeated buf.registry.module.v1beta1.Graph.Commit commits = 1;
   */
  commits: Graph_Commit[] = [];

  /**
   * The edges of the graph.
   *
   * @generated from field: repeated buf.registry.module.v1beta1.Graph.Edge edges = 2;
   */
  edges: Graph_Edge[] = [];

  constructor(data?: PartialMessage<Graph>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1beta1.Graph";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commits", kind: "message", T: Graph_Commit, repeated: true },
    { no: 2, name: "edges", kind: "message", T: Graph_Edge, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Graph {
    return new Graph().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Graph {
    return new Graph().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Graph {
    return new Graph().fromJsonString(jsonString, options);
  }

  static equals(a: Graph | PlainMessage<Graph> | undefined, b: Graph | PlainMessage<Graph> | undefined): boolean {
    return proto3.util.equals(Graph, a, b);
  }
}

/**
 * A Commit in the dependency graph.
 *
 * This wraps the top-level Commit.
 *
 * @generated from message buf.registry.module.v1beta1.Graph.Commit
 */
export class Graph_Commit extends Message<Graph_Commit> {
  /**
   * The top-level Commit.
   *
   * @generated from field: buf.registry.module.v1beta1.Commit commit = 1;
   */
  commit?: Commit;

  /**
   * The registry hostname of the Commit.
   *
   * @generated from field: string registry = 2;
   */
  registry = "";

  constructor(data?: PartialMessage<Graph_Commit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1beta1.Graph.Commit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commit", kind: "message", T: Commit },
    { no: 2, name: "registry", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Graph_Commit {
    return new Graph_Commit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Graph_Commit {
    return new Graph_Commit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Graph_Commit {
    return new Graph_Commit().fromJsonString(jsonString, options);
  }

  static equals(a: Graph_Commit | PlainMessage<Graph_Commit> | undefined, b: Graph_Commit | PlainMessage<Graph_Commit> | undefined): boolean {
    return proto3.util.equals(Graph_Commit, a, b);
  }
}

/**
 * A node in the dependency graph.
 *
 * @generated from message buf.registry.module.v1beta1.Graph.Node
 */
export class Graph_Node extends Message<Graph_Node> {
  /**
   * The commit of the node.
   *
   * @generated from field: string commit_id = 1;
   */
  commitId = "";

  /**
   * The registry hostname of the Node.
   *
   * @generated from field: string registry = 2;
   */
  registry = "";

  constructor(data?: PartialMessage<Graph_Node>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1beta1.Graph.Node";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commit_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "registry", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Graph_Node {
    return new Graph_Node().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Graph_Node {
    return new Graph_Node().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Graph_Node {
    return new Graph_Node().fromJsonString(jsonString, options);
  }

  static equals(a: Graph_Node | PlainMessage<Graph_Node> | undefined, b: Graph_Node | PlainMessage<Graph_Node> | undefined): boolean {
    return proto3.util.equals(Graph_Node, a, b);
  }
}

/**
 * An edge in the dependency graph.
 *
 * @generated from message buf.registry.module.v1beta1.Graph.Edge
 */
export class Graph_Edge extends Message<Graph_Edge> {
  /**
   * The Node of the start of the edge.
   *
   * @generated from field: buf.registry.module.v1beta1.Graph.Node from_node = 1;
   */
  fromNode?: Graph_Node;

  /**
   * The Node of the end of the edge.
   *
   * @generated from field: buf.registry.module.v1beta1.Graph.Node to_node = 2;
   */
  toNode?: Graph_Node;

  constructor(data?: PartialMessage<Graph_Edge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1beta1.Graph.Edge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from_node", kind: "message", T: Graph_Node },
    { no: 2, name: "to_node", kind: "message", T: Graph_Node },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Graph_Edge {
    return new Graph_Edge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Graph_Edge {
    return new Graph_Edge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Graph_Edge {
    return new Graph_Edge().fromJsonString(jsonString, options);
  }

  static equals(a: Graph_Edge | PlainMessage<Graph_Edge> | undefined, b: Graph_Edge | PlainMessage<Graph_Edge> | undefined): boolean {
    return proto3.util.equals(Graph_Edge, a, b);
  }
}

