// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "ts_nocheck=false,target=ts"
// @generated from file buf/registry/module/v1/file.proto (package buf.registry.module.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * A specific file type.
 *
 * @generated from enum buf.registry.module.v1.FileType
 */
export enum FileType {
  /**
   * @generated from enum value: FILE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * A .proto file.
   *
   * @generated from enum value: FILE_TYPE_PROTO = 1;
   */
  PROTO = 1,

  /**
   * A documentation file.
   *
   * Documentation files are always named README.md, README.markdown, or buf.md.
   *
   * @generated from enum value: FILE_TYPE_DOC = 2;
   */
  DOC = 2,

  /**
   * A license file.
   *
   * License files are always named LICENSE.
   *
   * @generated from enum value: FILE_TYPE_LICENSE = 3;
   */
  LICENSE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(FileType)
proto3.util.setEnumType(FileType, "buf.registry.module.v1.FileType", [
  { no: 0, name: "FILE_TYPE_UNSPECIFIED" },
  { no: 1, name: "FILE_TYPE_PROTO" },
  { no: 2, name: "FILE_TYPE_DOC" },
  { no: 3, name: "FILE_TYPE_LICENSE" },
]);

/**
 * A file that can be read or written to from disk.
 *
 * A File includes a path and associated content.
 * Files are purposefully simple, and do not include attributes such as permissions.
 *
 * @generated from message buf.registry.module.v1.File
 */
export class File extends Message<File> {
  /**
   * The path of the File.
   *
   * The path must be relative, and cannot contain any "." or ".." components.
   * The separator "/" must be used.
   *
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * The content of the File.
   *
   * May be empty.
   *
   * @generated from field: bytes content = 2;
   */
  content = new Uint8Array(0);

  constructor(data?: PartialMessage<File>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1.File";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): File {
    return new File().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): File {
    return new File().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): File {
    return new File().fromJsonString(jsonString, options);
  }

  static equals(a: File | PlainMessage<File> | undefined, b: File | PlainMessage<File> | undefined): boolean {
    return proto3.util.equals(File, a, b);
  }
}

