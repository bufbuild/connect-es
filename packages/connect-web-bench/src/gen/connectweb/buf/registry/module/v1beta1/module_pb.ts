// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "ts_nocheck=false,target=ts"
// @generated from file buf/registry/module/v1beta1/module.proto (package buf.registry.module.v1beta1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * The visibility of a Module, currently either public or private.
 *
 * @generated from enum buf.registry.module.v1beta1.ModuleVisibility
 */
export enum ModuleVisibility {
  /**
   * @generated from enum value: MODULE_VISIBILITY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * MODULE_VISIBILITY_PUBLIC says that the module is publicly available.
   *
   * @generated from enum value: MODULE_VISIBILITY_PUBLIC = 1;
   */
  PUBLIC = 1,

  /**
   * MODULE_VISIBILITY_PRIVATE says that the module is private.
   *
   * @generated from enum value: MODULE_VISIBILITY_PRIVATE = 2;
   */
  PRIVATE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ModuleVisibility)
proto3.util.setEnumType(ModuleVisibility, "buf.registry.module.v1beta1.ModuleVisibility", [
  { no: 0, name: "MODULE_VISIBILITY_UNSPECIFIED" },
  { no: 1, name: "MODULE_VISIBILITY_PUBLIC" },
  { no: 2, name: "MODULE_VISIBILITY_PRIVATE" },
]);

/**
 * The state of a Module, currently either active or deprecated.
 *
 * @generated from enum buf.registry.module.v1beta1.ModuleState
 */
export enum ModuleState {
  /**
   * @generated from enum value: MODULE_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * MODULE_STATE_ACTIVE says that the Module is currently active.
   *
   * @generated from enum value: MODULE_STATE_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * MODULE_STATE_DEPRECATED says that the Module has been deprecated and should not longer be
   * used.
   *
   * @generated from enum value: MODULE_STATE_DEPRECATED = 2;
   */
  DEPRECATED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ModuleState)
proto3.util.setEnumType(ModuleState, "buf.registry.module.v1beta1.ModuleState", [
  { no: 0, name: "MODULE_STATE_UNSPECIFIED" },
  { no: 1, name: "MODULE_STATE_ACTIVE" },
  { no: 2, name: "MODULE_STATE_DEPRECATED" },
]);

/**
 * A module within the BSR.
 *
 * @generated from message buf.registry.module.v1beta1.Module
 */
export class Module extends Message<Module> {
  /**
   * The id of the Module.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The time the Module was created on the BSR.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * The last time the Module was updated on the BSR.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * The name of the Module.
   *
   * Unique within a given User or Organization.
   *
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * The id of the User or Organization that owns the Module.
   *
   * @generated from field: string owner_id = 5;
   */
  ownerId = "";

  /**
   * The Module's visibility, either public or private.
   *
   * @generated from field: buf.registry.module.v1beta1.ModuleVisibility visibility = 6;
   */
  visibility = ModuleVisibility.UNSPECIFIED;

  /**
   * The Module state, either active or deprecated.
   *
   * @generated from field: buf.registry.module.v1beta1.ModuleState state = 7;
   */
  state = ModuleState.UNSPECIFIED;

  /**
   * The configurable description of the Module.
   *
   * @generated from field: string description = 8;
   */
  description = "";

  /**
   * The configurable URL in the description of the Module,
   *
   * @generated from field: string url = 9;
   */
  url = "";

  /**
   * The name of the default Label of the Module.
   *
   * This Label may not yet exist. When a Module is created, it has no Commits, and Labels
   * must have a Commit, so this Label is not created when a Module is created. Additionally,
   * a User may modify the name of the default Label without this Label yet being created.
   *
   * This could also be the name of an archived Label.
   *
   * @generated from field: string default_label_name = 10;
   */
  defaultLabelName = "";

  constructor(data?: PartialMessage<Module>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1beta1.Module";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "create_time", kind: "message", T: Timestamp },
    { no: 3, name: "update_time", kind: "message", T: Timestamp },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "owner_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "visibility", kind: "enum", T: proto3.getEnumType(ModuleVisibility) },
    { no: 7, name: "state", kind: "enum", T: proto3.getEnumType(ModuleState) },
    { no: 8, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "default_label_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Module {
    return new Module().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Module {
    return new Module().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Module {
    return new Module().fromJsonString(jsonString, options);
  }

  static equals(a: Module | PlainMessage<Module> | undefined, b: Module | PlainMessage<Module> | undefined): boolean {
    return proto3.util.equals(Module, a, b);
  }
}

/**
 * ModuleRef is a reference to a Module, either an id or a fully-qualified name.
 *
 * This is used in requests.
 *
 * @generated from message buf.registry.module.v1beta1.ModuleRef
 */
export class ModuleRef extends Message<ModuleRef> {
  /**
   * @generated from oneof buf.registry.module.v1beta1.ModuleRef.value
   */
  value: {
    /**
     * The id of the Module.
     *
     * @generated from field: string id = 1;
     */
    value: string;
    case: "id";
  } | {
    /**
     * The fully-qualified name of the Module.
     *
     * @generated from field: buf.registry.module.v1beta1.ModuleRef.Name name = 2;
     */
    value: ModuleRef_Name;
    case: "name";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ModuleRef>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1beta1.ModuleRef";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 2, name: "name", kind: "message", T: ModuleRef_Name, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModuleRef {
    return new ModuleRef().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModuleRef {
    return new ModuleRef().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModuleRef {
    return new ModuleRef().fromJsonString(jsonString, options);
  }

  static equals(a: ModuleRef | PlainMessage<ModuleRef> | undefined, b: ModuleRef | PlainMessage<ModuleRef> | undefined): boolean {
    return proto3.util.equals(ModuleRef, a, b);
  }
}

/**
 * The fully-qualified name of a Module within a BSR instance.
 *
 * A Name uniquely identifies a Module.
 * This is used for requests when a caller only has the module name and not the ID.
 *
 * @generated from message buf.registry.module.v1beta1.ModuleRef.Name
 */
export class ModuleRef_Name extends Message<ModuleRef_Name> {
  /**
   * The name of the owner of the Module, either a User or Organization.
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * The name of the Module.
   *
   * @generated from field: string module = 2;
   */
  module = "";

  constructor(data?: PartialMessage<ModuleRef_Name>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1beta1.ModuleRef.Name";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModuleRef_Name {
    return new ModuleRef_Name().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModuleRef_Name {
    return new ModuleRef_Name().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModuleRef_Name {
    return new ModuleRef_Name().fromJsonString(jsonString, options);
  }

  static equals(a: ModuleRef_Name | PlainMessage<ModuleRef_Name> | undefined, b: ModuleRef_Name | PlainMessage<ModuleRef_Name> | undefined): boolean {
    return proto3.util.equals(ModuleRef_Name, a, b);
  }
}

