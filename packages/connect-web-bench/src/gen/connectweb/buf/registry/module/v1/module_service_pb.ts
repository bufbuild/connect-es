// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "ts_nocheck=false,target=ts"
// @generated from file buf/registry/module/v1/module_service.proto (package buf.registry.module.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Module, ModuleRef, ModuleState, ModuleVisibility } from "./module_pb.js";
import { OwnerRef } from "../../owner/v1/owner_pb.js";

/**
 * @generated from message buf.registry.module.v1.GetModulesRequest
 */
export class GetModulesRequest extends Message<GetModulesRequest> {
  /**
   * The Modules to request.
   *
   * @generated from field: repeated buf.registry.module.v1.ModuleRef module_refs = 1;
   */
  moduleRefs: ModuleRef[] = [];

  constructor(data?: PartialMessage<GetModulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1.GetModulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module_refs", kind: "message", T: ModuleRef, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModulesRequest {
    return new GetModulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModulesRequest {
    return new GetModulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModulesRequest {
    return new GetModulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetModulesRequest | PlainMessage<GetModulesRequest> | undefined, b: GetModulesRequest | PlainMessage<GetModulesRequest> | undefined): boolean {
    return proto3.util.equals(GetModulesRequest, a, b);
  }
}

/**
 * @generated from message buf.registry.module.v1.GetModulesResponse
 */
export class GetModulesResponse extends Message<GetModulesResponse> {
  /**
   * The retrieved Modules in the same order as requested.
   *
   * @generated from field: repeated buf.registry.module.v1.Module modules = 1;
   */
  modules: Module[] = [];

  constructor(data?: PartialMessage<GetModulesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1.GetModulesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "modules", kind: "message", T: Module, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModulesResponse {
    return new GetModulesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModulesResponse {
    return new GetModulesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModulesResponse {
    return new GetModulesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetModulesResponse | PlainMessage<GetModulesResponse> | undefined, b: GetModulesResponse | PlainMessage<GetModulesResponse> | undefined): boolean {
    return proto3.util.equals(GetModulesResponse, a, b);
  }
}

/**
 * @generated from message buf.registry.module.v1.ListModulesRequest
 */
export class ListModulesRequest extends Message<ListModulesRequest> {
  /**
   * The maximum number of items to return.
   *
   * The default value is 10.
   *
   * @generated from field: uint32 page_size = 1;
   */
  pageSize = 0;

  /**
   * The page to start from.
   *
   * If empty, the first page is returned,
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * The specific Users or Organizations to list Modules for.
   *
   * If empty, all Modules for all owners are listed, but this functionality
   * is limited to Users with the necessary permissions.
   *
   * @generated from field: repeated buf.registry.owner.v1.OwnerRef owner_refs = 3;
   */
  ownerRefs: OwnerRef[] = [];

  /**
   * The order to return the Modules.
   *
   * If not specified, defaults to ORDER_CREATE_TIME_DESC.
   *
   * @generated from field: buf.registry.module.v1.ListModulesRequest.Order order = 4;
   */
  order = ListModulesRequest_Order.UNSPECIFIED;

  constructor(data?: PartialMessage<ListModulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1.ListModulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owner_refs", kind: "message", T: OwnerRef, repeated: true },
    { no: 4, name: "order", kind: "enum", T: proto3.getEnumType(ListModulesRequest_Order) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListModulesRequest {
    return new ListModulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListModulesRequest {
    return new ListModulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListModulesRequest {
    return new ListModulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListModulesRequest | PlainMessage<ListModulesRequest> | undefined, b: ListModulesRequest | PlainMessage<ListModulesRequest> | undefined): boolean {
    return proto3.util.equals(ListModulesRequest, a, b);
  }
}

/**
 * The list order.
 *
 * @generated from enum buf.registry.module.v1.ListModulesRequest.Order
 */
export enum ListModulesRequest_Order {
  /**
   * @generated from enum value: ORDER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Order by create_time newest to oldest.
   *
   * @generated from enum value: ORDER_CREATE_TIME_DESC = 1;
   */
  CREATE_TIME_DESC = 1,

  /**
   * Order by create_time oldest to newest.
   *
   * @generated from enum value: ORDER_CREATE_TIME_ASC = 2;
   */
  CREATE_TIME_ASC = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ListModulesRequest_Order)
proto3.util.setEnumType(ListModulesRequest_Order, "buf.registry.module.v1.ListModulesRequest.Order", [
  { no: 0, name: "ORDER_UNSPECIFIED" },
  { no: 1, name: "ORDER_CREATE_TIME_DESC" },
  { no: 2, name: "ORDER_CREATE_TIME_ASC" },
]);

/**
 * @generated from message buf.registry.module.v1.ListModulesResponse
 */
export class ListModulesResponse extends Message<ListModulesResponse> {
  /**
   * The next page token.
   *
   * If empty, there are no more pages.
   *
   * @generated from field: string next_page_token = 1;
   */
  nextPageToken = "";

  /**
   * The listed Modules.
   *
   * @generated from field: repeated buf.registry.module.v1.Module modules = 2;
   */
  modules: Module[] = [];

  constructor(data?: PartialMessage<ListModulesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1.ListModulesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "modules", kind: "message", T: Module, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListModulesResponse {
    return new ListModulesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListModulesResponse {
    return new ListModulesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListModulesResponse {
    return new ListModulesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListModulesResponse | PlainMessage<ListModulesResponse> | undefined, b: ListModulesResponse | PlainMessage<ListModulesResponse> | undefined): boolean {
    return proto3.util.equals(ListModulesResponse, a, b);
  }
}

/**
 * @generated from message buf.registry.module.v1.CreateModulesRequest
 */
export class CreateModulesRequest extends Message<CreateModulesRequest> {
  /**
   * The Modules to create.
   *
   * @generated from field: repeated buf.registry.module.v1.CreateModulesRequest.Value values = 1;
   */
  values: CreateModulesRequest_Value[] = [];

  constructor(data?: PartialMessage<CreateModulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1.CreateModulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "message", T: CreateModulesRequest_Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateModulesRequest {
    return new CreateModulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateModulesRequest {
    return new CreateModulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateModulesRequest {
    return new CreateModulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateModulesRequest | PlainMessage<CreateModulesRequest> | undefined, b: CreateModulesRequest | PlainMessage<CreateModulesRequest> | undefined): boolean {
    return proto3.util.equals(CreateModulesRequest, a, b);
  }
}

/**
 * An individual request to create a Module.
 *
 * @generated from message buf.registry.module.v1.CreateModulesRequest.Value
 */
export class CreateModulesRequest_Value extends Message<CreateModulesRequest_Value> {
  /**
   * The User or Organization to create the Module under.
   *
   * @generated from field: buf.registry.owner.v1.OwnerRef owner_ref = 1;
   */
  ownerRef?: OwnerRef;

  /**
   * The name of the Module.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * The module's visibility.
   *
   * @generated from field: buf.registry.module.v1.ModuleVisibility visibility = 3;
   */
  visibility = ModuleVisibility.UNSPECIFIED;

  /**
   * The configurable description of the Module.
   *
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * The configurable URL in the description of the module.
   *
   * @generated from field: string url = 5;
   */
  url = "";

  /**
   * The name of the default Label of the Module.
   *
   * If not set, the default Label will be named "main" upon creation.
   *
   * This may point to an archived Label.
   *
   * @generated from field: string default_label_name = 6;
   */
  defaultLabelName = "";

  constructor(data?: PartialMessage<CreateModulesRequest_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1.CreateModulesRequest.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner_ref", kind: "message", T: OwnerRef },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "visibility", kind: "enum", T: proto3.getEnumType(ModuleVisibility) },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "default_label_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateModulesRequest_Value {
    return new CreateModulesRequest_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateModulesRequest_Value {
    return new CreateModulesRequest_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateModulesRequest_Value {
    return new CreateModulesRequest_Value().fromJsonString(jsonString, options);
  }

  static equals(a: CreateModulesRequest_Value | PlainMessage<CreateModulesRequest_Value> | undefined, b: CreateModulesRequest_Value | PlainMessage<CreateModulesRequest_Value> | undefined): boolean {
    return proto3.util.equals(CreateModulesRequest_Value, a, b);
  }
}

/**
 * @generated from message buf.registry.module.v1.CreateModulesResponse
 */
export class CreateModulesResponse extends Message<CreateModulesResponse> {
  /**
   * The created Modules in the same order as given on the request.
   *
   * @generated from field: repeated buf.registry.module.v1.Module modules = 1;
   */
  modules: Module[] = [];

  constructor(data?: PartialMessage<CreateModulesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1.CreateModulesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "modules", kind: "message", T: Module, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateModulesResponse {
    return new CreateModulesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateModulesResponse {
    return new CreateModulesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateModulesResponse {
    return new CreateModulesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateModulesResponse | PlainMessage<CreateModulesResponse> | undefined, b: CreateModulesResponse | PlainMessage<CreateModulesResponse> | undefined): boolean {
    return proto3.util.equals(CreateModulesResponse, a, b);
  }
}

/**
 * @generated from message buf.registry.module.v1.UpdateModulesRequest
 */
export class UpdateModulesRequest extends Message<UpdateModulesRequest> {
  /**
   * The Modules to update.
   *
   * @generated from field: repeated buf.registry.module.v1.UpdateModulesRequest.Value values = 1;
   */
  values: UpdateModulesRequest_Value[] = [];

  constructor(data?: PartialMessage<UpdateModulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1.UpdateModulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "message", T: UpdateModulesRequest_Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateModulesRequest {
    return new UpdateModulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateModulesRequest {
    return new UpdateModulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateModulesRequest {
    return new UpdateModulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateModulesRequest | PlainMessage<UpdateModulesRequest> | undefined, b: UpdateModulesRequest | PlainMessage<UpdateModulesRequest> | undefined): boolean {
    return proto3.util.equals(UpdateModulesRequest, a, b);
  }
}

/**
 * An individual request to update a Module.
 *
 * @generated from message buf.registry.module.v1.UpdateModulesRequest.Value
 */
export class UpdateModulesRequest_Value extends Message<UpdateModulesRequest_Value> {
  /**
   * The Module to update.
   *
   * @generated from field: buf.registry.module.v1.ModuleRef module_ref = 1;
   */
  moduleRef?: ModuleRef;

  /**
   * The module's visibility.
   *
   * @generated from field: optional buf.registry.module.v1.ModuleVisibility visibility = 3;
   */
  visibility?: ModuleVisibility;

  /**
   * The deprecation status of the module.
   *
   * @generated from field: optional buf.registry.module.v1.ModuleState state = 4;
   */
  state?: ModuleState;

  /**
   * The configurable description of the module.
   *
   * @generated from field: optional string description = 5;
   */
  description?: string;

  /**
   * The configurable URL in the description of the module.
   *
   * @generated from field: optional string url = 6;
   */
  url?: string;

  /**
   * The name of the default Label of the Module.
   *
   * This Label may not yet exist.
   *
   * This may not point to an archived Label.
   *
   * @generated from field: optional string default_label_name = 7;
   */
  defaultLabelName?: string;

  constructor(data?: PartialMessage<UpdateModulesRequest_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1.UpdateModulesRequest.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module_ref", kind: "message", T: ModuleRef },
    { no: 3, name: "visibility", kind: "enum", T: proto3.getEnumType(ModuleVisibility), opt: true },
    { no: 4, name: "state", kind: "enum", T: proto3.getEnumType(ModuleState), opt: true },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "default_label_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateModulesRequest_Value {
    return new UpdateModulesRequest_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateModulesRequest_Value {
    return new UpdateModulesRequest_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateModulesRequest_Value {
    return new UpdateModulesRequest_Value().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateModulesRequest_Value | PlainMessage<UpdateModulesRequest_Value> | undefined, b: UpdateModulesRequest_Value | PlainMessage<UpdateModulesRequest_Value> | undefined): boolean {
    return proto3.util.equals(UpdateModulesRequest_Value, a, b);
  }
}

/**
 * @generated from message buf.registry.module.v1.UpdateModulesResponse
 */
export class UpdateModulesResponse extends Message<UpdateModulesResponse> {
  /**
   * The updated Modules in the same order as given on the request.
   *
   * @generated from field: repeated buf.registry.module.v1.Module modules = 1;
   */
  modules: Module[] = [];

  constructor(data?: PartialMessage<UpdateModulesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1.UpdateModulesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "modules", kind: "message", T: Module, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateModulesResponse {
    return new UpdateModulesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateModulesResponse {
    return new UpdateModulesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateModulesResponse {
    return new UpdateModulesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateModulesResponse | PlainMessage<UpdateModulesResponse> | undefined, b: UpdateModulesResponse | PlainMessage<UpdateModulesResponse> | undefined): boolean {
    return proto3.util.equals(UpdateModulesResponse, a, b);
  }
}

/**
 * @generated from message buf.registry.module.v1.DeleteModulesRequest
 */
export class DeleteModulesRequest extends Message<DeleteModulesRequest> {
  /**
   * The Modules to delete.
   *
   * @generated from field: repeated buf.registry.module.v1.ModuleRef module_refs = 1;
   */
  moduleRefs: ModuleRef[] = [];

  constructor(data?: PartialMessage<DeleteModulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1.DeleteModulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module_refs", kind: "message", T: ModuleRef, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteModulesRequest {
    return new DeleteModulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteModulesRequest {
    return new DeleteModulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteModulesRequest {
    return new DeleteModulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteModulesRequest | PlainMessage<DeleteModulesRequest> | undefined, b: DeleteModulesRequest | PlainMessage<DeleteModulesRequest> | undefined): boolean {
    return proto3.util.equals(DeleteModulesRequest, a, b);
  }
}

/**
 * @generated from message buf.registry.module.v1.DeleteModulesResponse
 */
export class DeleteModulesResponse extends Message<DeleteModulesResponse> {
  constructor(data?: PartialMessage<DeleteModulesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.registry.module.v1.DeleteModulesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteModulesResponse {
    return new DeleteModulesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteModulesResponse {
    return new DeleteModulesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteModulesResponse {
    return new DeleteModulesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteModulesResponse | PlainMessage<DeleteModulesResponse> | undefined, b: DeleteModulesResponse | PlainMessage<DeleteModulesResponse> | undefined): boolean {
    return proto3.util.equals(DeleteModulesResponse, a, b);
  }
}

