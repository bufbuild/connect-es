// Copyright 2021-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-web v0.0.6 with parameter "ts_nocheck=false,target=ts"
// @generated from file testing/v1/test.proto (package testing.v1, syntax proto3)
/* eslint-disable */

import {FullDuplexCallRequest, FullDuplexCallResponse, ServerStreamingEmptyRequest, ServerStreamingEmptyResponse, ServerStreamingErrorRequest, ServerStreamingErrorResponse, ServerStreamingHappyRequest, ServerStreamingHappyResponse, ServerStreamingUnimplementedRequest, ServerStreamingUnimplementedResponse, UnaryErrorRequest, UnaryErrorResponse, UnaryExpectHeadersRequest, UnaryExpectHeadersResponse, UnaryHappyRequest, UnaryHappyResponse, UnaryHeadersRequest, UnaryHeadersResponse, UnaryTrailersRequest, UnaryTrailersResponse, UnaryUnimplementedRequest, UnaryUnimplementedResponse} from "./test_pb.js";
import {MethodKind} from "@bufbuild/protobuf";

/**
 * @generated from service testing.v1.TestService
 */
export const TestService = {
  typeName: "testing.v1.TestService",
  methods: {
    /**
     * Returns the numeric value from the request as a string in the response
     *
     * @generated from rpc testing.v1.TestService.UnaryHappy
     */
    unaryHappy: {
      name: "UnaryHappy",
      I: UnaryHappyRequest,
      O: UnaryHappyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Always raises an error "already_exists", and a message with whitespace
     * and unicode content
     *
     * @generated from rpc testing.v1.TestService.UnaryError
     */
    unaryError: {
      name: "UnaryError",
      I: UnaryErrorRequest,
      O: UnaryErrorResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Responds with headers:
     * single-value: foo
     * separate-values: bar
     * separate-values: baz
     * joined-values: bar,baz
     *
     * @generated from rpc testing.v1.TestService.UnaryHeaders
     */
    unaryHeaders: {
      name: "UnaryHeaders",
      I: UnaryHeadersRequest,
      O: UnaryHeadersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Responds with trailers:
     * single-value: foo
     * separate-values: bar
     * separate-values: baz
     * joined-values: bar,baz
     *
     * @generated from rpc testing.v1.TestService.UnaryTrailers
     */
    unaryTrailers: {
      name: "UnaryTrailers",
      I: UnaryTrailersRequest,
      O: UnaryTrailersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Expects a set of headers in the request:
     * single-value: foo
     * separate-values: bar
     * separate-values: baz
     * joined-values: bar, baz
     * Clients may join the two `separate-values` headers into one, with values
     * separated by `, `. Errors with invalid_argument if not met.
     *
     * @generated from rpc testing.v1.TestService.UnaryExpectHeaders
     */
    unaryExpectHeaders: {
      name: "UnaryExpectHeaders",
      I: UnaryExpectHeadersRequest,
      O: UnaryExpectHeadersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Not implemented by the server
     *
     * @generated from rpc testing.v1.TestService.UnaryUnimplemented
     */
    unaryUnimplemented: {
      name: "UnaryUnimplemented",
      I: UnaryUnimplementedRequest,
      O: UnaryUnimplementedResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns exactly 5 responses. The value from the request is incremented
     * and given in each response.
     * Responds with headers:
     * single-value-head: foo
     * separate-values-head: bar
     * separate-values-head: baz
     * joined-values-head: bar,baz
     * Responds with trailers:
     * single-value: foo
     * separate-values: bar
     * separate-values: baz
     * joined-values: bar,baz
     *
     * @generated from rpc testing.v1.TestService.ServerStreamingHappy
     */
    serverStreamingHappy: {
      name: "ServerStreamingHappy",
      I: ServerStreamingHappyRequest,
      O: ServerStreamingHappyResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Always raises an error "already_exists", and a message with whitespace
     * and unicode content
     *
     * @generated from rpc testing.v1.TestService.ServerStreamingError
     */
    serverStreamingError: {
      name: "ServerStreamingError",
      I: ServerStreamingErrorRequest,
      O: ServerStreamingErrorResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc testing.v1.TestService.ServerStreamingEmpty
     */
    serverStreamingEmpty: {
      name: "ServerStreamingEmpty",
      I: ServerStreamingEmptyRequest,
      O: ServerStreamingEmptyResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc testing.v1.TestService.ServerStreamingUnimplemented
     */
    serverStreamingUnimplemented: {
      name: "ServerStreamingUnimplemented",
      I: ServerStreamingUnimplementedRequest,
      O: ServerStreamingUnimplementedResponse,
      kind: MethodKind.Unary,
    },
    /**
     * A sequence of requests with each request served by the server immediately.
     * As one request could lead to multiple responses, this interface
     * demonstrates the idea of full duplexing.
     *
     * @generated from rpc testing.v1.TestService.FullDuplexCall
     */
    fullDuplexCall: {
      name: "FullDuplexCall",
      I: FullDuplexCallRequest,
      O: FullDuplexCallResponse,
      kind: MethodKind.BiDiStreaming,
    },
  }
} as const;

