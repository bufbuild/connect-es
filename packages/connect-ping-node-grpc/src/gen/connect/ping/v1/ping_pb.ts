// Copyright 2021-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/* eslint-disable */
/* @ts-nocheck */
// @generated by protoc-gen-es v0.0.2-alpha.2 with parameter "target=ts"
// @generated from file connect/ping/v1/ping.proto (package connect.ping.v1, syntax proto3)
//
// Copyright 2021-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, protoInt64} from "@bufbuild/protobuf";

/**
 * @generated from message connect.ping.v1.PingRequest
 */
export class PingRequest extends Message<PingRequest> {

    /**
     * @generated from field: int64 number = 1;
     */
    number = protoInt64.zero;

    /**
     * @generated from field: string text = 2;
     */
    text = "";

    constructor(data?: PartialMessage<PingRequest>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "connect.ping.v1.PingRequest";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        {no: 1, name: "number", kind: "scalar", T: 3 /* ScalarType.INT64 */},
        {no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */},
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest {
        return new PingRequest().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest {
        return new PingRequest().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest {
        return new PingRequest().fromJsonString(jsonString, options);
    }

    static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean {
        return proto3.util.equals(PingRequest, a, b);
    }

}


/**
 * @generated from message connect.ping.v1.PingResponse
 */
export class PingResponse extends Message<PingResponse> {

    /**
     * @generated from field: int64 number = 1;
     */
    number = protoInt64.zero;

    /**
     * @generated from field: string text = 2;
     */
    text = "";

    constructor(data?: PartialMessage<PingResponse>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "connect.ping.v1.PingResponse";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        {no: 1, name: "number", kind: "scalar", T: 3 /* ScalarType.INT64 */},
        {no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */},
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse {
        return new PingResponse().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse {
        return new PingResponse().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse {
        return new PingResponse().fromJsonString(jsonString, options);
    }

    static equals(a: PingResponse | PlainMessage<PingResponse> | undefined, b: PingResponse | PlainMessage<PingResponse> | undefined): boolean {
        return proto3.util.equals(PingResponse, a, b);
    }

}


/**
 * @generated from message connect.ping.v1.FailRequest
 */
export class FailRequest extends Message<FailRequest> {

    /**
     * @generated from field: int32 code = 1;
     */
    code = 0;

    constructor(data?: PartialMessage<FailRequest>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "connect.ping.v1.FailRequest";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        {no: 1, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */},
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FailRequest {
        return new FailRequest().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FailRequest {
        return new FailRequest().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FailRequest {
        return new FailRequest().fromJsonString(jsonString, options);
    }

    static equals(a: FailRequest | PlainMessage<FailRequest> | undefined, b: FailRequest | PlainMessage<FailRequest> | undefined): boolean {
        return proto3.util.equals(FailRequest, a, b);
    }

}


/**
 * @generated from message connect.ping.v1.FailResponse
 */
export class FailResponse extends Message<FailResponse> {

    constructor(data?: PartialMessage<FailResponse>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "connect.ping.v1.FailResponse";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FailResponse {
        return new FailResponse().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FailResponse {
        return new FailResponse().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FailResponse {
        return new FailResponse().fromJsonString(jsonString, options);
    }

    static equals(a: FailResponse | PlainMessage<FailResponse> | undefined, b: FailResponse | PlainMessage<FailResponse> | undefined): boolean {
        return proto3.util.equals(FailResponse, a, b);
    }

}


/**
 * @generated from message connect.ping.v1.SumRequest
 */
export class SumRequest extends Message<SumRequest> {

    /**
     * @generated from field: int64 number = 1;
     */
    number = protoInt64.zero;

    constructor(data?: PartialMessage<SumRequest>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "connect.ping.v1.SumRequest";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        {no: 1, name: "number", kind: "scalar", T: 3 /* ScalarType.INT64 */},
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SumRequest {
        return new SumRequest().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SumRequest {
        return new SumRequest().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SumRequest {
        return new SumRequest().fromJsonString(jsonString, options);
    }

    static equals(a: SumRequest | PlainMessage<SumRequest> | undefined, b: SumRequest | PlainMessage<SumRequest> | undefined): boolean {
        return proto3.util.equals(SumRequest, a, b);
    }

}


/**
 * @generated from message connect.ping.v1.SumResponse
 */
export class SumResponse extends Message<SumResponse> {

    /**
     * @generated from field: int64 sum = 1;
     */
    sum = protoInt64.zero;

    constructor(data?: PartialMessage<SumResponse>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "connect.ping.v1.SumResponse";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        {no: 1, name: "sum", kind: "scalar", T: 3 /* ScalarType.INT64 */},
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SumResponse {
        return new SumResponse().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SumResponse {
        return new SumResponse().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SumResponse {
        return new SumResponse().fromJsonString(jsonString, options);
    }

    static equals(a: SumResponse | PlainMessage<SumResponse> | undefined, b: SumResponse | PlainMessage<SumResponse> | undefined): boolean {
        return proto3.util.equals(SumResponse, a, b);
    }

}


/**
 * @generated from message connect.ping.v1.CountUpRequest
 */
export class CountUpRequest extends Message<CountUpRequest> {

    /**
     * @generated from field: int64 number = 1;
     */
    number = protoInt64.zero;

    constructor(data?: PartialMessage<CountUpRequest>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "connect.ping.v1.CountUpRequest";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        {no: 1, name: "number", kind: "scalar", T: 3 /* ScalarType.INT64 */},
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountUpRequest {
        return new CountUpRequest().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountUpRequest {
        return new CountUpRequest().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountUpRequest {
        return new CountUpRequest().fromJsonString(jsonString, options);
    }

    static equals(a: CountUpRequest | PlainMessage<CountUpRequest> | undefined, b: CountUpRequest | PlainMessage<CountUpRequest> | undefined): boolean {
        return proto3.util.equals(CountUpRequest, a, b);
    }

}


/**
 * @generated from message connect.ping.v1.CountUpResponse
 */
export class CountUpResponse extends Message<CountUpResponse> {

    /**
     * @generated from field: int64 number = 1;
     */
    number = protoInt64.zero;

    constructor(data?: PartialMessage<CountUpResponse>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "connect.ping.v1.CountUpResponse";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        {no: 1, name: "number", kind: "scalar", T: 3 /* ScalarType.INT64 */},
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountUpResponse {
        return new CountUpResponse().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountUpResponse {
        return new CountUpResponse().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountUpResponse {
        return new CountUpResponse().fromJsonString(jsonString, options);
    }

    static equals(a: CountUpResponse | PlainMessage<CountUpResponse> | undefined, b: CountUpResponse | PlainMessage<CountUpResponse> | undefined): boolean {
        return proto3.util.equals(CountUpResponse, a, b);
    }

}


/**
 * @generated from message connect.ping.v1.CumSumRequest
 */
export class CumSumRequest extends Message<CumSumRequest> {

    /**
     * @generated from field: int64 number = 1;
     */
    number = protoInt64.zero;

    constructor(data?: PartialMessage<CumSumRequest>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "connect.ping.v1.CumSumRequest";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        {no: 1, name: "number", kind: "scalar", T: 3 /* ScalarType.INT64 */},
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CumSumRequest {
        return new CumSumRequest().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CumSumRequest {
        return new CumSumRequest().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CumSumRequest {
        return new CumSumRequest().fromJsonString(jsonString, options);
    }

    static equals(a: CumSumRequest | PlainMessage<CumSumRequest> | undefined, b: CumSumRequest | PlainMessage<CumSumRequest> | undefined): boolean {
        return proto3.util.equals(CumSumRequest, a, b);
    }

}


/**
 * @generated from message connect.ping.v1.CumSumResponse
 */
export class CumSumResponse extends Message<CumSumResponse> {

    /**
     * @generated from field: int64 sum = 1;
     */
    sum = protoInt64.zero;

    constructor(data?: PartialMessage<CumSumResponse>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "connect.ping.v1.CumSumResponse";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        {no: 1, name: "sum", kind: "scalar", T: 3 /* ScalarType.INT64 */},
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CumSumResponse {
        return new CumSumResponse().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CumSumResponse {
        return new CumSumResponse().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CumSumResponse {
        return new CumSumResponse().fromJsonString(jsonString, options);
    }

    static equals(a: CumSumResponse | PlainMessage<CumSumResponse> | undefined, b: CumSumResponse | PlainMessage<CumSumResponse> | undefined): boolean {
        return proto3.util.equals(CumSumResponse, a, b);
    }

}


